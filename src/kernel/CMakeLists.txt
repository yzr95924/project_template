# ./src/kernel
find_package(KernelHeader REQUIRED)
set(KERNEL_MODULE_NAME "my_module")
add_definitions(-D__KERNEL__ -DMODULE -D__GNUC__)
set(KERNEL_MODULE_FILE_NAME "${KERNEL_MODULE_NAME}.ko")

# add header to include path
include_directories(${KERNEL_HEADER_INCLUDE})

# configure the compile command
set(KBUILD_CMD $(MAKE) modules -C ${KERNEL_SOURCE_DIR}
    M=${CMAKE_CURRENT_BINARY_DIR}
    src=${CMAKE_CURRENT_SOURCE_DIR}
)
set(KBUILD_FILE ${CMAKE_CURRENT_SOURCE_DIR}/Kbuild)
set(MODULE_DEPEND_OBJECT "hello.o")

# Generate the Kbuild file through cmake.
add_custom_command(OUTPUT ${KBUILD_FILE}
    COMMAND echo "obj-m := ${KERNEL_MODULE_NAME}.o" > ${KBUILD_FILE}
    COMMAND echo "${KERNEL_MODULE_NAME}-objs := ${MODULE_DEPEND_OBJECT}" >> ${KBUILD_FILE}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    VERBATIM
)

add_custom_command(OUTPUT ${KERNEL_MODULE_FILE_NAME}
    COMMAND ${KBUILD_CMD}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    DEPENDS hello.c ${KBUILD_FILE}
    VERBATIM
)

add_custom_target(BuildMyMod ALL DEPENDS ${KBUILD_FILE} ${KERNEL_MODULE_FILE_NAME})

add_custom_command(TARGET BuildMyMod POST_BUILD
    COMMAND ${CMAKE_COMMADN} mv
    ${CMAKE_CURRENT_BINARY_DIR}/${KERNEL_MODULE_FILE_NAME}
    ${EXECUTABLE_OUTPUT_PATH}
    VERBATIM
)